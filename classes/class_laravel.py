# -*- coding: utf-8 -*-
# Laravelファイルの作成クラス

import os
import re
import yaml
import datetime
import shutil


def create_laravel_files(yaml_path, output_file_path):
    """
    Laravel のViewファイルを作成する

    Parameters
    ----------
    yaml_path : string
        yamlファイルのパス
    output_file_path : string
        yamlファイルのパス
    :return:
    """
    # yamlファイルの読み込み
    with open(yaml_path, 'r') as yml:
        yaml_views = yaml.safe_load(yml)

    # 出力先の設定。パラメータが設定されていない場合はデフォルトを設定する。
    out_put = output_file_path
    if output_file_path == '':
        out_put = 'output_views_laravel'

    # ShowMessage
    print('Target View: Laravel')
    print('version: ' + yaml_views['version'])
    if 'copyright' in yaml_views:
        print('copyright: ' + yaml_views['copyright'])
    if 'author' in yaml_views:
        print('author: ' + yaml_views['author'])
    print(yaml_views['description'])

    # 作成しているフォルダを削除する
    if os.path.isdir(out_put):
        shutil.rmtree(out_put)

    # routes ファイルの初期化
    init_routes_files(out_put, yaml_views)

    # Viewのデータ情報を設定する
    views = yaml_views['views']
    for key, view in views.items():
        # キーが存在しない場合はエラーを表示してcontinue
        if not view:
            print('Parameter is none: ' + key)
            continue

        # 必須パラメータチェック
        require_parameters = ['title', 'url', 'description']
        require_flg = True
        for parameter in require_parameters:
            if parameter not in view:
                print('Not set parameters: {}: '.format(parameter) + key)
                require_flg = False
        if not require_flg:
            continue

        # View データを設定する
        laravel = Laravel(out_put)
        if 'copyright' in yaml_views:
            laravel.copyright_name = yaml_views['copyright']
        if 'author' in yaml_views:
            laravel.author_name = yaml_views['author']
        laravel.view_id = key
        laravel.title = view['title']
        laravel.url = view['url']
        laravel.description = view['description']
        if 'middleware' in view:
            laravel.middleware = view['middleware']

        # phpファイルの書き出し
        laravel.output_files()


def init_routes_files(out_put, yaml_views):
    """
    routes ファイルの作成
    :param out_put: 出力先のパス
    :param yaml_views: yamlの情報
    :return:
    """
    # 作成するファイル名の設定
    route_name = 'web'

    # 保存先のフォルダを作成する
    output_dirs = out_put + '/routes'
    os.makedirs(output_dirs, exist_ok=True)

    # web.phpファイルを書き込みモードで初期化
    source_file = open(output_dirs + '/' + route_name + '.php', 'w')

    author_name = ''
    copyright_name = ''
    if 'copyright' in yaml_views:
        copyright_name = ' * @copyright ' + yaml_views['copyright'] + '\n'
    if 'author' in yaml_views:
        author_name = ' * @author ' + yaml_views['author'] + '\n'

    # ソースコードを作成する
    current_time = datetime.datetime.now().strftime('%Y_%m_%d_%H%M%S')
    source_code = '<?php\n' \
                  '/**\n' \
                  ' * Screen path setting / 画面のパス設定\n' \
                  ' *\n' \
                  ' * This code is auto generated by yaml_to_view.\n{}{}' \
                  ' * @version {}\n' \
                  ' */\n\n'.format(copyright_name, author_name, current_time)

    # ViewControllers.phpファイルにソースコードを読み込む
    source_file.write(source_code)
    source_file.close()


# Classの定義
class Laravel:
    view_id = ''
    title = ''
    url = ''
    description = ''
    out_put = ''
    author_name = ''
    copyright_name = ''
    middleware = []

    controller_name = ''

    # 初期処理
    def __init__(self, out_put):
        self.out_put = out_put
        pass

    def output_files(self):
        """
        情報を書き出す
        :return:
        """
        # Controllerファイルを作成する
        self.create_view_controller()

        # routeファイルのソースを書き込む
        self.write_routes_files()

        # bladeファイルを作成する
        self.create_blade_files()

    def create_view_controller(self):
        """
        Controllerファイルの作成
        :return:
        """
        # ファイル名を設定する
        camel_name = re.sub("_(.)", lambda x: x.group(1).upper(), self.view_id.capitalize())
        self.controller_name = 'View' + camel_name + 'Controller'

        # 保存先のフォルダを作成する
        output_dirs = self.out_put + '/app/Http/Controllers'
        os.makedirs(output_dirs, exist_ok=True)

        # ViewControllers.phpファイルの初期化
        source_file = open(output_dirs + '/' + self.controller_name + '.php', 'w')

        # Controllerのテンプレートソースコードを読み込む
        controller_file = open(os.path.dirname(__file__) + '/../template/php/ViewController.php', 'r')
        template_source = controller_file.read()

        # ソースコードを設定する
        comment = self.description.replace('\n', '\n * ')
        template_source = template_source.replace('__comment__', comment)

        # バージョンに現在時刻を設定する
        current_time = datetime.datetime.now().strftime('%Y_%m_%d_%H%M%S')
        template_source = template_source.replace('__version__', current_time)

        # Controller名を設定する
        template_source = template_source.replace('__controller_name__', self.controller_name)

        # view id を設定する
        template_source = template_source.replace('__view_id__', self.view_id.upper())

        # bladeファイル名を設定する
        template_source = template_source.replace('__blade_name__', self.view_id)

        # copyrightを設定する
        if self.copyright_name == '':
            template_source = template_source.replace('__copyright__', '')
        else:
            template_source = template_source.replace('__copyright__', '\n * @copyright ' + self.copyright_name)

        # authorを設定する
        if self.author_name == '':
            template_source = template_source.replace('__author__', '')
        else:
            template_source = template_source.replace('__author__', '\n * @author ' + self.author_name)

        # ViewControllers.phpファイルにソースコードを書き込む
        source_file.write(template_source)
        source_file.close()

    def write_routes_files(self):
        """
        routes ファイルの書き込み
        :return:
        """
        # ファイル名を設定する
        route_name = 'web'

        # 保存先のフォルダを作成する
        output_dirs = self.out_put + '/routes'
        os.makedirs(output_dirs, exist_ok=True)

        # web.phpファイルを書き込みモードで初期化
        source_file = open(output_dirs + '/' + route_name + '.php', 'a')

        # ソースコードを作成する
        view_id = self.view_id.upper()
        comment = self.description.replace('\n', '\n * ')
        middlewares = ','.join(self.middleware)
        middlewares = '\'' + middlewares.replace(',', '\',\'') + '\''
        source_code = '/**\n' \
                      ' * GET Views\n' \
                      ' * {}\n' \
                      ' * ViewID: {}\n' \
                      ' */\n'.format(comment, view_id)
        if isinstance(self.middleware, list) and len(self.middleware) > 0:
            source_code = source_code + \
                          'Route::GET(\'{}\', [\n' \
                          '    \'middleware\' => [{}],\n' \
                          '    \'uses\' => \'App\\Http\\Controllers\\{}@view\'\n' \
                          ']);\n\n'.format(self.url, middlewares, self.controller_name)
        else:
            source_code = source_code + \
                          'Route::GET(\'{}\', \'App\\Http\\Controllers\\{}@view\');' \
                          '\n\n'.format(self.url, self.controller_name)

        # web.phpファイルにソースコードを書き込む
        source_file.write(source_code)
        source_file.close()

    def create_blade_files(self):
        """
        bladeファイルの作成
        :return:
        """
        # ファイル名を設定する
        blade_file_name = self.view_id + '.blade'

        # 保存先のフォルダを作成する
        output_dirs = self.out_put + '/resources/views'
        os.makedirs(output_dirs, exist_ok=True)

        # ViewControllers.phpファイルの初期化
        source_file = open(output_dirs + '/' + blade_file_name + '.php', 'w')

        # bladeファイルのテンプレートソースコードを読み込む
        blade_file = open(os.path.dirname(__file__) + '/../template/php/Blade.php', 'r')
        template_source = blade_file.read()

        # ソースコードを設定する
        comment = self.description.replace('\n', '\n * ')
        template_source = template_source.replace('__comment__', comment)

        # view id を設定する
        template_source = template_source.replace('__view_id__', self.view_id.upper())

        # タイトルを設定する
        template_source = template_source.replace('__title__', self.title)

        # blade.phpファイルにソースコードを書き込む
        source_file.write(template_source)
        source_file.close()
