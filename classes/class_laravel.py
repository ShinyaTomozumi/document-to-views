# -*- coding: utf-8 -*-
# Laravelファイルの作成クラス

import os
import re
import yaml
import datetime
import shutil
from typing import Type
from models.parameter_config import ParameterConfig

SCSS_FILE_NAME = 'app'
TYPE_SCRIPT_FILE_NAME = 'app'
RESOURCES_SCSS_PATH = '/resources/css'
RESOURCES_TYPE_SCRIPT_PATH = '/resources/ts'
RESOURCES_VIEW_SCSS_PATH = RESOURCES_SCSS_PATH + '/view'
RESOURCES_VIEW_TYPE_SCRIPT_PATH = RESOURCES_TYPE_SCRIPT_PATH + '/view'
ROUTES_FILE_NAME = 'web'
ROUTES_DIR = '/routes'


def create_laravel_files(parameter_config: Type[ParameterConfig]):
    """
    Laravel のViewファイルを作成する
    :param parameter_config:
    :return:
    """
    # yamlファイルの読み込み
    with open(parameter_config.input_files_path, 'r') as yml:
        yaml_views = yaml.safe_load(yml)

    # 出力先の設定。パラメータが設定されていない場合はデフォルトを設定する。
    out_put = parameter_config.output_dir_path
    if out_put == '':
        out_put = 'output_views_laravel'

    # ShowMessage
    print('Target View: Laravel')
    print('version: ' + yaml_views['version'])
    if 'copyright' in yaml_views:
        print('copyright: ' + yaml_views['copyright'])
    if 'author' in yaml_views:
        print('author: ' + yaml_views['author'])
    print(yaml_views['description'])

    # 作成しているフォルダを削除する
    if os.path.isdir(out_put):
        shutil.rmtree(out_put)

    # routes ファイルの初期化
    init_routes_files(out_put, yaml_views)

    # app.scss ファイルの初期化
    init_app_scss_files(out_put, yaml_views)

    # Viewのデータ情報を設定する
    views = yaml_views['views']
    ts_import_list = []
    ts_on_load_list = []
    for key, view in views.items():
        # キーが存在しない場合はエラーを表示してcontinue
        if not view:
            print('Parameter is none: ' + key)
            continue

        # 必須パラメータチェック
        require_parameters = ['title', 'url', 'description']
        require_flg = True
        for parameter in require_parameters:
            if parameter not in view:
                print('Not set parameters: {}: '.format(parameter) + key)
                require_flg = False
        if not require_flg:
            continue

        # View データを設定する
        laravel = Laravel(out_put)
        if 'copyright' in yaml_views:
            laravel.copyright_name = yaml_views['copyright']
        if 'author' in yaml_views:
            laravel.author_name = yaml_views['author']
        laravel.view_id = key
        laravel.title = view['title']
        laravel.url = view['url']
        laravel.description = view['description']
        if 'middleware' in view:
            laravel.middleware = view['middleware']

        # app.ts用にインポート文字列とonload用の文字列を作成する
        camel_name = re.sub("_(.)", lambda x: x.group(1).upper(), laravel.view_id.capitalize())
        ts_import_list.append('const view{} = require(\'./view/{}\');\n'.format(camel_name, laravel.view_id))
        on_load_text = 'if (document.getElementById\'{}\') != null) {{\n' \
                       '        view{}.default();\n' \
                       '    }}\n\n'.format(laravel.view_id.upper(), camel_name)
        ts_on_load_list.append(on_load_text)

        # phpファイルの書き出し
        laravel.output_files()

    # View データを設定する
    laravel = Laravel(out_put)
    laravel.white_ts_app_files(ts_import_list, ts_on_load_list)


def init_routes_files(out_put, yaml_views):
    """
    routes ファイルの作成
    :param out_put: 出力先のパス
    :param yaml_views: yamlの情報
    :return:
    """
    # 作成するファイル名の設定
    route_name = ROUTES_FILE_NAME

    # 保存先のフォルダを作成する
    output_dirs = out_put + ROUTES_DIR
    os.makedirs(output_dirs, exist_ok=True)

    # web.phpファイルを書き込みモードで初期化
    source_file = open(output_dirs + '/' + route_name + '.php', 'w')

    author_name = ''
    copyright_name = ''
    if 'copyright' in yaml_views:
        copyright_name = ' * @copyright ' + yaml_views['copyright'] + '\n'
    if 'author' in yaml_views:
        author_name = ' * @author ' + yaml_views['author'] + '\n'

    # ソースコードを作成する
    current_time = datetime.datetime.now().strftime('%Y_%m_%d_%H%M%S')
    source_code = '<?php\n' \
                  '/**\n' \
                  ' * Screen path setting / 画面のパス設定\n' \
                  ' *\n' \
                  ' * This code is auto generated by yaml_to_view.\n{}{}' \
                  ' * @version {}\n' \
                  ' */\n\n'.format(copyright_name, author_name, current_time)

    # ViewControllers.phpファイルにソースコードを読み込む
    source_file.write(source_code)
    source_file.close()


def init_app_scss_files(out_put, yaml_views):
    """
    app.scss ファイルの初期化ファイルを作成する
    :param out_put: 出力先のパス
    :param yaml_views: yamlの情報
    :return:
    """
    # 作成するファイル名の設定
    file_name = SCSS_FILE_NAME

    # 保存先のフォルダを作成する
    output_dirs = out_put + RESOURCES_SCSS_PATH
    os.makedirs(output_dirs, exist_ok=True)

    # web.phpファイルを書き込みモードで初期化
    source_file = open(output_dirs + '/' + file_name + '.scss', 'w')

    # ソースコードを作成する
    source_code = 'body {\n' \
                  '    margin: 0;\n' \
                  '    padding: 0;\n' \
                  '    height: 100%;\n' \
                  '}\n\n' \
                  '// Library\n\n' \
                  '// Import\n\n' \
                  '// View\n'

    # app.scssファイルにソースコードを読み込む
    source_file.write(source_code)
    source_file.close()


# Classの定義
class Laravel:
    view_id = ''
    title = ''
    url = ''
    description = ''
    out_put = ''
    author_name = ''
    copyright_name = ''
    middleware = []

    controller_name = ''
    ts_views = []

    # 初期処理
    def __init__(self, out_put):
        self.out_put = out_put
        pass

    def output_files(self):
        """
        情報を書き出す
        :return:
        """
        # Controllerファイルを作成する
        self.create_view_controller()

        # routeファイルのソースを書き込む
        self.write_routes_files()

        # bladeファイルを作成する
        self.create_blade_files()

        # app.scssにソースを書き込む
        self.write_scss_app_files()

        # view用の scssファイルを作成する
        self.create_scss_view_files()

        # view用の TypeScript ファイルを作成する。
        self.create_type_script_view_file()

    def create_view_controller(self):
        """
        Controllerファイルの作成
        :return:
        """
        # ファイル名を設定する
        camel_name = re.sub("_(.)", lambda x: x.group(1).upper(), self.view_id.capitalize())
        self.controller_name = 'View' + camel_name + 'Controller'

        # 保存先のフォルダを作成する
        output_dirs = self.out_put + '/app/Http/Controllers'
        os.makedirs(output_dirs, exist_ok=True)

        # ViewControllers.phpファイルの初期化
        source_file = open(output_dirs + '/' + self.controller_name + '.php', 'w')

        # Controllerのテンプレートソースコードを読み込む
        controller_file = open(os.path.dirname(__file__) + '/../template/php/ViewController.php', 'r')
        template_source = controller_file.read()

        # ソースコードを設定する
        comment = self.description.replace('\n', '\n * ')
        template_source = template_source.replace('__comment__', comment)

        # バージョンに現在時刻を設定する
        current_time = datetime.datetime.now().strftime('%Y_%m_%d_%H%M%S')
        template_source = template_source.replace('__version__', current_time)

        # Controller名を設定する
        template_source = template_source.replace('__controller_name__', self.controller_name)

        # view id を設定する
        template_source = template_source.replace('__view_id__', self.view_id.upper())

        # bladeファイル名を設定する
        template_source = template_source.replace('__blade_name__', self.view_id)

        # copyrightを設定する
        if self.copyright_name == '':
            template_source = template_source.replace('__copyright__', '')
        else:
            template_source = template_source.replace('__copyright__', '\n * @copyright ' + self.copyright_name)

        # authorを設定する
        if self.author_name == '':
            template_source = template_source.replace('__author__', '')
        else:
            template_source = template_source.replace('__author__', '\n * @author ' + self.author_name)

        # パラメータを設定する
        url_path_params = re.findall("(?<=\{).+?(?=\})", self.url)
        if len(url_path_params) > 0:
            str_parameter = ''
            controller_comments = ''
            # 設定に必要な文字列を作成する
            for params in url_path_params:
                str_parameter += ', string $' + params
                controller_comments += '\n     * @param string $' + params

            # パラメータを設定する
            template_source = template_source.replace('__paths__', str_parameter)
            template_source = template_source.replace('__comment_params__', controller_comments)
        else:
            # パラメータが存在しない場合はテンプレートの文字列を消去する
            template_source = template_source.replace('__paths__', '')
            template_source = template_source.replace('__comment_params__', '')

        # ViewControllers.phpファイルにソースコードを書き込む
        source_file.write(template_source)
        source_file.close()

    def write_routes_files(self):
        """
        routes ファイルの書き込み
        :return:
        """
        # ファイル名を設定する
        route_name = ROUTES_FILE_NAME

        # 保存先のフォルダを作成する
        output_dirs = self.out_put + ROUTES_DIR
        os.makedirs(output_dirs, exist_ok=True)

        # web.phpファイルを書き込みモードで初期化
        source_file = open(output_dirs + '/' + route_name + '.php', 'a')

        # ソースコードを作成する
        view_id = self.view_id.upper()
        comment = self.description.replace('\n', '\n * ')
        middlewares = ','.join(self.middleware)
        middlewares = '\'' + middlewares.replace(',', '\',\'') + '\''
        source_code = '/**\n' \
                      ' * GET Views\n' \
                      ' * {}\n' \
                      ' * ViewID: {}\n' \
                      ' */\n'.format(comment, view_id)
        if isinstance(self.middleware, list) and len(self.middleware) > 0:
            source_code = source_code + \
                          'Route::GET(\'{}\', [\n' \
                          '    \'middleware\' => [{}],\n' \
                          '    \'uses\' => \'App\\Http\\Controllers\\{}@view\'\n' \
                          ']);\n\n'.format(self.url, middlewares, self.controller_name)
        else:
            source_code = source_code + \
                          'Route::GET(\'{}\', \'App\\Http\\Controllers\\{}@view\');' \
                          '\n\n'.format(self.url, self.controller_name)

        # web.phpファイルにソースコードを書き込む
        source_file.write(source_code)
        source_file.close()

    def create_blade_files(self):
        """
        bladeファイルの作成
        :return:
        """
        # ファイル名を設定する
        blade_file_name = self.view_id + '.blade'

        # 保存先のフォルダを作成する
        output_dirs = self.out_put + '/resources/views'
        os.makedirs(output_dirs, exist_ok=True)

        # blade.phpファイルを開く
        source_file = open(output_dirs + '/' + blade_file_name + '.php', 'w')

        # bladeファイルのテンプレートソースコードを読み込む
        blade_file = open(os.path.dirname(__file__) + '/../template/php/Blade.php', 'r')
        template_source = blade_file.read()

        # ソースコードを設定する
        comment = self.description.replace('\n', '\n * ')
        template_source = template_source.replace('__comment__', comment)

        # view id を設定する
        template_source = template_source.replace('__view_id__', self.view_id.upper())

        # タイトルを設定する
        template_source = template_source.replace('__title__', self.title)

        # blade.phpファイルにソースコードを書き込む
        source_file.write(template_source)
        source_file.close()

    def write_scss_app_files(self):
        """
        app.scssを書き出す
        :return:
        """
        # ファイル名を設定する
        scss_file_name = SCSS_FILE_NAME

        # 保存先のフォルダを作成する
        output_dirs = self.out_put + RESOURCES_SCSS_PATH
        os.makedirs(output_dirs, exist_ok=True)

        # app.scssファイルを追加書き込みモードで開く
        source_file = open(output_dirs + '/' + scss_file_name + '.scss', 'a')

        # 基本的なソースコードを定義する
        view_id = self.view_id.lower()
        source_code = '@import "view/{}";\n'.format(view_id)

        # app.scssファイルにソースコードを書き込む
        source_file.write(source_code)
        source_file.close()

    def create_scss_view_files(self):
        """
        view用のscssファイルを作成する
        :return:
        """
        # ファイル名を設定する
        scss_file_name = self.view_id

        # 保存先のフォルダを作成する
        output_dirs = self.out_put + RESOURCES_VIEW_SCSS_PATH
        os.makedirs(output_dirs, exist_ok=True)

        # scssファイルを開く
        source_file = open(output_dirs + '/' + scss_file_name + '.scss', 'w')

        # ソースコードの記述
        view_id = self.view_id.lower()
        source_code = '///\n' \
                      '/// ViewID: {}";\n' \
                      '///\n\n'.format(view_id)

        # blade.phpファイルにソースコードを書き込む
        source_file.write(source_code)
        source_file.close()

    def create_type_script_view_file(self):
        """
        TypeScriptファイルのViewテンプレートを作成
        :return:
        """
        # ファイル名を設定する
        ts_view_file_name = self.view_id

        # 保存先のフォルダを作成する
        output_dirs = self.out_put + RESOURCES_VIEW_TYPE_SCRIPT_PATH
        os.makedirs(output_dirs, exist_ok=True)

        # TS viewファイルを開く
        source_file = open(output_dirs + '/' + ts_view_file_name + '.ts', 'w')

        # TS viewファイルのテンプレートソースコードを読み込む
        ts_view_file = open(os.path.dirname(__file__) + '/../template/laravel_ts/view.ts', 'r')
        template_source = ts_view_file.read()

        # ソースコードを設定する
        comment = self.description.replace('\n', '\n * ')
        template_source = template_source.replace('__comment__', comment)

        # view id を設定する
        template_source = template_source.replace('__view_id__', self.view_id.upper())

        # タイトルを設定する
        template_source = template_source.replace('__title__', self.title)

        # blade.phpファイルにソースコードを書き込む
        source_file.write(template_source)
        source_file.close()

    def white_ts_app_files(self, ts_import_list, ts_on_load_list):
        """
        app.tsを書き出す
        :param ts_import_list:
        :param ts_on_load_list:
        :return:
        """
        # ファイル名を設定する
        ts_app_file_name = TYPE_SCRIPT_FILE_NAME

        # 保存先のフォルダを作成する
        output_dirs = self.out_put + RESOURCES_TYPE_SCRIPT_PATH
        os.makedirs(output_dirs, exist_ok=True)

        # blade.phpファイルを開く
        source_file = open(output_dirs + '/' + ts_app_file_name + '.ts', 'w')

        # TypeScriptのappファイルのテンプレートソースコードを読み込む
        ts_app_file = open(os.path.dirname(__file__) + '/../template/laravel_ts/app.ts', 'r')
        template_source = ts_app_file.read()

        # Importの定義を設定する
        template_source = template_source.replace('__require__', ''.join(ts_import_list))

        # view ごとの読み込み処理を定義する
        template_source = template_source.replace('__view_default__', ''.join(ts_on_load_list))

        # app.tsファイルにソースコードを書き込む
        source_file.write(template_source)
        source_file.close()
